// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"line"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void acceptGroupInvitation(i32 reqSeq, string groupId)")
	fmt.Fprintln(os.Stderr, "   fetchOperations(i64 localRev, i32 count)")
	fmt.Fprintln(os.Stderr, "   getAllContactIds()")
	fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
	fmt.Fprintln(os.Stderr, "   getContacts( ids)")
	fmt.Fprintln(os.Stderr, "  Group getGroup(string groupId)")
	fmt.Fprintln(os.Stderr, "   getGroupIdsInvited()")
	fmt.Fprintln(os.Stderr, "   getGroupIdsJoined()")
	fmt.Fprintln(os.Stderr, "   getGroups( groupIds)")
	fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
	fmt.Fprintln(os.Stderr, "  MessageBoxWrapUpList getMessageBoxCompactWrapUpList(i32 start, i32 messageBoxCount)")
	fmt.Fprintln(os.Stderr, "   getPreviousMessages(string messageBoxId, i64 endSeq, i32 messagesCount)")
	fmt.Fprintln(os.Stderr, "   getRecentMessages(string messageBoxId, i32 messagesCount)")
	fmt.Fprintln(os.Stderr, "  Room getRoom(string roomId)")
	fmt.Fprintln(os.Stderr, "  LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)")
	fmt.Fprintln(os.Stderr, "  LoginResult loginWithVerifierForCertificate(string verifier)")
	fmt.Fprintln(os.Stderr, "  void leaveGroup(i32 reqSeq, string groupId)")
	fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
	fmt.Fprintln(os.Stderr, "  Profile getProfile()")
	fmt.Fprintln(os.Stderr, "  void rejectGroupInvitation(i32 reqSeq, string groupId)")
	fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
	fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactSetting flag, string value)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := line.NewTalkServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "acceptGroupInvitation":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AcceptGroupInvitation requires 2 args")
			flag.Usage()
		}
		tmp0, err64 := (strconv.Atoi(flag.Arg(1)))
		if err64 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AcceptGroupInvitation(value0, value1))
		fmt.Print("\n")
		break
	case "fetchOperations":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FetchOperations requires 2 args")
			flag.Usage()
		}
		argvalue0, err66 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err66 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err67 := (strconv.Atoi(flag.Arg(2)))
		if err67 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.FetchOperations(value0, value1))
		fmt.Print("\n")
		break
	case "getAllContactIds":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllContactIds requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllContactIds())
		fmt.Print("\n")
		break
	case "getContact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetContact(value0))
		fmt.Print("\n")
		break
	case "getContacts":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
			flag.Usage()
		}
		arg69 := flag.Arg(1)
		mbTrans70 := thrift.NewTMemoryBufferLen(len(arg69))
		defer mbTrans70.Close()
		_, err71 := mbTrans70.WriteString(arg69)
		if err71 != nil {
			Usage()
			return
		}
		factory72 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt73 := factory72.GetProtocol(mbTrans70)
		containerStruct0 := line.NewGetContactsArgs()
		err74 := containerStruct0.ReadField1(jsProt73)
		if err74 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Ids
		value0 := argvalue0
		fmt.Print(client.GetContacts(value0))
		fmt.Print("\n")
		break
	case "getGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetGroup(value0))
		fmt.Print("\n")
		break
	case "getGroupIdsInvited":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetGroupIdsInvited requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetGroupIdsInvited())
		fmt.Print("\n")
		break
	case "getGroupIdsJoined":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetGroupIdsJoined requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetGroupIdsJoined())
		fmt.Print("\n")
		break
	case "getGroups":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetGroups requires 1 args")
			flag.Usage()
		}
		arg76 := flag.Arg(1)
		mbTrans77 := thrift.NewTMemoryBufferLen(len(arg76))
		defer mbTrans77.Close()
		_, err78 := mbTrans77.WriteString(arg76)
		if err78 != nil {
			Usage()
			return
		}
		factory79 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt80 := factory79.GetProtocol(mbTrans77)
		containerStruct0 := line.NewGetGroupsArgs()
		err81 := containerStruct0.ReadField1(jsProt80)
		if err81 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.GroupIds
		value0 := argvalue0
		fmt.Print(client.GetGroups(value0))
		fmt.Print("\n")
		break
	case "getLastOpRevision":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetLastOpRevision())
		fmt.Print("\n")
		break
	case "getMessageBoxCompactWrapUpList":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetMessageBoxCompactWrapUpList requires 2 args")
			flag.Usage()
		}
		tmp0, err82 := (strconv.Atoi(flag.Arg(1)))
		if err82 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err83 := (strconv.Atoi(flag.Arg(2)))
		if err83 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetMessageBoxCompactWrapUpList(value0, value1))
		fmt.Print("\n")
		break
	case "getPreviousMessages":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPreviousMessages requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1, err85 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err85 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err86 := (strconv.Atoi(flag.Arg(3)))
		if err86 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPreviousMessages(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getRecentMessages":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetRecentMessages requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err88 := (strconv.Atoi(flag.Arg(2)))
		if err88 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetRecentMessages(value0, value1))
		fmt.Print("\n")
		break
	case "getRoom":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRoom requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetRoom(value0))
		fmt.Print("\n")
		break
	case "loginWithIdentityCredentialForCertificate":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "LoginWithIdentityCredentialForCertificate requires 7 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := line.IdentityProvider(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		argvalue6 := flag.Arg(7)
		value6 := argvalue6
		fmt.Print(client.LoginWithIdentityCredentialForCertificate(value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "loginWithVerifierForCertificate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "LoginWithVerifierForCertificate requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.LoginWithVerifierForCertificate(value0))
		fmt.Print("\n")
		break
	case "leaveGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "LeaveGroup requires 2 args")
			flag.Usage()
		}
		tmp0, err97 := (strconv.Atoi(flag.Arg(1)))
		if err97 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.LeaveGroup(value0, value1))
		fmt.Print("\n")
		break
	case "leaveRoom":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
			flag.Usage()
		}
		tmp0, err99 := (strconv.Atoi(flag.Arg(1)))
		if err99 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.LeaveRoom(value0, value1))
		fmt.Print("\n")
		break
	case "getProfile":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetProfile requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetProfile())
		fmt.Print("\n")
		break
	case "rejectGroupInvitation":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RejectGroupInvitation requires 2 args")
			flag.Usage()
		}
		tmp0, err101 := (strconv.Atoi(flag.Arg(1)))
		if err101 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RejectGroupInvitation(value0, value1))
		fmt.Print("\n")
		break
	case "sendMessage":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
			flag.Usage()
		}
		tmp0, err103 := (strconv.Atoi(flag.Arg(1)))
		if err103 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg104 := flag.Arg(2)
		mbTrans105 := thrift.NewTMemoryBufferLen(len(arg104))
		defer mbTrans105.Close()
		_, err106 := mbTrans105.WriteString(arg104)
		if err106 != nil {
			Usage()
			return
		}
		factory107 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt108 := factory107.GetProtocol(mbTrans105)
		argvalue1 := line.NewMessage()
		err109 := argvalue1.Read(jsProt108)
		if err109 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SendMessage(value0, value1))
		fmt.Print("\n")
		break
	case "updateContactSetting":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
			flag.Usage()
		}
		tmp0, err110 := (strconv.Atoi(flag.Arg(1)))
		if err110 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := line.ContactSetting(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.UpdateContactSetting(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
