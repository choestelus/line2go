// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package line

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ContactSetting int64

const (
	ContactSetting_CONTACT_SETTING_DELETE ContactSetting = 16
)

func (p ContactSetting) String() string {
	switch p {
	case ContactSetting_CONTACT_SETTING_DELETE:
		return "ContactSetting_CONTACT_SETTING_DELETE"
	}
	return "<UNSET>"
}

func ContactSettingFromString(s string) (ContactSetting, error) {
	switch s {
	case "ContactSetting_CONTACT_SETTING_DELETE":
		return ContactSetting_CONTACT_SETTING_DELETE, nil
	}
	return ContactSetting(0), fmt.Errorf("not a valid ContactSetting string")
}

func ContactSettingPtr(v ContactSetting) *ContactSetting { return &v }

type ContactStatus int64

const (
	ContactStatus_FRIEND            ContactStatus = 1
	ContactStatus_FRIEND_BLOCKED    ContactStatus = 2
	ContactStatus_RECOMMEND_BLOCKED ContactStatus = 4
	ContactStatus_DELETED           ContactStatus = 5
	ContactStatus_DELETED_BLOCKED   ContactStatus = 6
)

func (p ContactStatus) String() string {
	switch p {
	case ContactStatus_FRIEND:
		return "ContactStatus_FRIEND"
	case ContactStatus_FRIEND_BLOCKED:
		return "ContactStatus_FRIEND_BLOCKED"
	case ContactStatus_RECOMMEND_BLOCKED:
		return "ContactStatus_RECOMMEND_BLOCKED"
	case ContactStatus_DELETED:
		return "ContactStatus_DELETED"
	case ContactStatus_DELETED_BLOCKED:
		return "ContactStatus_DELETED_BLOCKED"
	}
	return "<UNSET>"
}

func ContactStatusFromString(s string) (ContactStatus, error) {
	switch s {
	case "ContactStatus_FRIEND":
		return ContactStatus_FRIEND, nil
	case "ContactStatus_FRIEND_BLOCKED":
		return ContactStatus_FRIEND_BLOCKED, nil
	case "ContactStatus_RECOMMEND_BLOCKED":
		return ContactStatus_RECOMMEND_BLOCKED, nil
	case "ContactStatus_DELETED":
		return ContactStatus_DELETED, nil
	case "ContactStatus_DELETED_BLOCKED":
		return ContactStatus_DELETED_BLOCKED, nil
	}
	return ContactStatus(0), fmt.Errorf("not a valid ContactStatus string")
}

func ContactStatusPtr(v ContactStatus) *ContactStatus { return &v }

type ContentType int64

const (
	ContentType_NONE     ContentType = 0
	ContentType_IMAGE    ContentType = 1
	ContentType_VIDEO    ContentType = 2
	ContentType_AUDIO    ContentType = 3
	ContentType_STICKER  ContentType = 7
	ContentType_LOCATION ContentType = 15
)

func (p ContentType) String() string {
	switch p {
	case ContentType_NONE:
		return "ContentType_NONE"
	case ContentType_IMAGE:
		return "ContentType_IMAGE"
	case ContentType_VIDEO:
		return "ContentType_VIDEO"
	case ContentType_AUDIO:
		return "ContentType_AUDIO"
	case ContentType_STICKER:
		return "ContentType_STICKER"
	case ContentType_LOCATION:
		return "ContentType_LOCATION"
	}
	return "<UNSET>"
}

func ContentTypeFromString(s string) (ContentType, error) {
	switch s {
	case "ContentType_NONE":
		return ContentType_NONE, nil
	case "ContentType_IMAGE":
		return ContentType_IMAGE, nil
	case "ContentType_VIDEO":
		return ContentType_VIDEO, nil
	case "ContentType_AUDIO":
		return ContentType_AUDIO, nil
	case "ContentType_STICKER":
		return ContentType_STICKER, nil
	case "ContentType_LOCATION":
		return ContentType_LOCATION, nil
	}
	return ContentType(0), fmt.Errorf("not a valid ContentType string")
}

func ContentTypePtr(v ContentType) *ContentType { return &v }

type ErrorCode int64

const (
	ErrorCode_ILLEGAL_ARGUMENT                           ErrorCode = 0
	ErrorCode_AUTHENTICATION_FAILED                      ErrorCode = 1
	ErrorCode_DB_FAILED                                  ErrorCode = 2
	ErrorCode_INVALID_STATE                              ErrorCode = 3
	ErrorCode_EXCESSIVE_ACCESS                           ErrorCode = 4
	ErrorCode_NOT_FOUND                                  ErrorCode = 5
	ErrorCode_INVALID_LENGTH                             ErrorCode = 6
	ErrorCode_NOT_AVAILABLE_USER                         ErrorCode = 7
	ErrorCode_NOT_AUTHORIZED_DEVICE                      ErrorCode = 8
	ErrorCode_INVALID_MID                                ErrorCode = 9
	ErrorCode_NOT_A_MEMBER                               ErrorCode = 10
	ErrorCode_INCOMPATIBLE_APP_VERSION                   ErrorCode = 11
	ErrorCode_NOT_READY                                  ErrorCode = 12
	ErrorCode_NOT_AVAILABLE_SESSION                      ErrorCode = 13
	ErrorCode_NOT_AUTHORIZED_SESSION                     ErrorCode = 14
	ErrorCode_SYSTEM_ERROR                               ErrorCode = 15
	ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD           ErrorCode = 16
	ErrorCode_NOT_AUTHENTICATED                          ErrorCode = 17
	ErrorCode_INVALID_IDENTITY_CREDENTIAL                ErrorCode = 18
	ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER          ErrorCode = 19
	ErrorCode_INTERNAL_ERROR                             ErrorCode = 20
	ErrorCode_NO_SUCH_IDENTITY_IDENFIER                  ErrorCode = 21
	ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY ErrorCode = 22
	ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL                ErrorCode = 23
	ErrorCode_UNKNOWN_CHANNEL                            ErrorCode = 24
	ErrorCode_NO_SUCH_MESSAGE_BOX                        ErrorCode = 25
	ErrorCode_NOT_AVAILABLE_MESSAGE_BOX                  ErrorCode = 26
	ErrorCode_CHANNEL_DOES_NOT_MATCH                     ErrorCode = 27
	ErrorCode_NOT_YOUR_MESSAGE                           ErrorCode = 28
	ErrorCode_MESSAGE_DEFINED_ERROR                      ErrorCode = 29
	ErrorCode_USER_CANNOT_ACCEPT_PRESENTS                ErrorCode = 30
	ErrorCode_USER_NOT_STICKER_OWNER                     ErrorCode = 32
	ErrorCode_MAINTENANCE_ERROR                          ErrorCode = 33
	ErrorCode_ACCOUNT_NOT_MATCHED                        ErrorCode = 34
	ErrorCode_ABUSE_BLOCK                                ErrorCode = 35
	ErrorCode_NOT_FRIEND                                 ErrorCode = 36
	ErrorCode_NOT_ALLOWED_CALL                           ErrorCode = 37
	ErrorCode_BLOCK_FRIEND                               ErrorCode = 38
	ErrorCode_INCOMPATIBLE_VOIP_VERSION                  ErrorCode = 39
	ErrorCode_INVALID_SNS_ACCESS_TOKEN                   ErrorCode = 40
	ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE             ErrorCode = 41
	ErrorCode_NOT_ALLOWED_ADD_CONTACT                    ErrorCode = 42
	ErrorCode_NOT_CERTIFICATED                           ErrorCode = 43
	ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE               ErrorCode = 44
	ErrorCode_INVALID_PIN_CODE                           ErrorCode = 45
	ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL              ErrorCode = 46
	ErrorCode_EXCEED_FILE_MAX_SIZE                       ErrorCode = 47
	ErrorCode_EXCEED_DAILY_QUOTA                         ErrorCode = 48
	ErrorCode_NOT_SUPPORT_SEND_FILE                      ErrorCode = 49
	ErrorCode_MUST_UPGRADE                               ErrorCode = 50
	ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION             ErrorCode = 51
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_ILLEGAL_ARGUMENT:
		return "ErrorCode_ILLEGAL_ARGUMENT"
	case ErrorCode_AUTHENTICATION_FAILED:
		return "ErrorCode_AUTHENTICATION_FAILED"
	case ErrorCode_DB_FAILED:
		return "ErrorCode_DB_FAILED"
	case ErrorCode_INVALID_STATE:
		return "ErrorCode_INVALID_STATE"
	case ErrorCode_EXCESSIVE_ACCESS:
		return "ErrorCode_EXCESSIVE_ACCESS"
	case ErrorCode_NOT_FOUND:
		return "ErrorCode_NOT_FOUND"
	case ErrorCode_INVALID_LENGTH:
		return "ErrorCode_INVALID_LENGTH"
	case ErrorCode_NOT_AVAILABLE_USER:
		return "ErrorCode_NOT_AVAILABLE_USER"
	case ErrorCode_NOT_AUTHORIZED_DEVICE:
		return "ErrorCode_NOT_AUTHORIZED_DEVICE"
	case ErrorCode_INVALID_MID:
		return "ErrorCode_INVALID_MID"
	case ErrorCode_NOT_A_MEMBER:
		return "ErrorCode_NOT_A_MEMBER"
	case ErrorCode_INCOMPATIBLE_APP_VERSION:
		return "ErrorCode_INCOMPATIBLE_APP_VERSION"
	case ErrorCode_NOT_READY:
		return "ErrorCode_NOT_READY"
	case ErrorCode_NOT_AVAILABLE_SESSION:
		return "ErrorCode_NOT_AVAILABLE_SESSION"
	case ErrorCode_NOT_AUTHORIZED_SESSION:
		return "ErrorCode_NOT_AUTHORIZED_SESSION"
	case ErrorCode_SYSTEM_ERROR:
		return "ErrorCode_SYSTEM_ERROR"
	case ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD:
		return "ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD"
	case ErrorCode_NOT_AUTHENTICATED:
		return "ErrorCode_NOT_AUTHENTICATED"
	case ErrorCode_INVALID_IDENTITY_CREDENTIAL:
		return "ErrorCode_INVALID_IDENTITY_CREDENTIAL"
	case ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER:
		return "ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER"
	case ErrorCode_INTERNAL_ERROR:
		return "ErrorCode_INTERNAL_ERROR"
	case ErrorCode_NO_SUCH_IDENTITY_IDENFIER:
		return "ErrorCode_NO_SUCH_IDENTITY_IDENFIER"
	case ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY:
		return "ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
	case ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL:
		return "ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL"
	case ErrorCode_UNKNOWN_CHANNEL:
		return "ErrorCode_UNKNOWN_CHANNEL"
	case ErrorCode_NO_SUCH_MESSAGE_BOX:
		return "ErrorCode_NO_SUCH_MESSAGE_BOX"
	case ErrorCode_NOT_AVAILABLE_MESSAGE_BOX:
		return "ErrorCode_NOT_AVAILABLE_MESSAGE_BOX"
	case ErrorCode_CHANNEL_DOES_NOT_MATCH:
		return "ErrorCode_CHANNEL_DOES_NOT_MATCH"
	case ErrorCode_NOT_YOUR_MESSAGE:
		return "ErrorCode_NOT_YOUR_MESSAGE"
	case ErrorCode_MESSAGE_DEFINED_ERROR:
		return "ErrorCode_MESSAGE_DEFINED_ERROR"
	case ErrorCode_USER_CANNOT_ACCEPT_PRESENTS:
		return "ErrorCode_USER_CANNOT_ACCEPT_PRESENTS"
	case ErrorCode_USER_NOT_STICKER_OWNER:
		return "ErrorCode_USER_NOT_STICKER_OWNER"
	case ErrorCode_MAINTENANCE_ERROR:
		return "ErrorCode_MAINTENANCE_ERROR"
	case ErrorCode_ACCOUNT_NOT_MATCHED:
		return "ErrorCode_ACCOUNT_NOT_MATCHED"
	case ErrorCode_ABUSE_BLOCK:
		return "ErrorCode_ABUSE_BLOCK"
	case ErrorCode_NOT_FRIEND:
		return "ErrorCode_NOT_FRIEND"
	case ErrorCode_NOT_ALLOWED_CALL:
		return "ErrorCode_NOT_ALLOWED_CALL"
	case ErrorCode_BLOCK_FRIEND:
		return "ErrorCode_BLOCK_FRIEND"
	case ErrorCode_INCOMPATIBLE_VOIP_VERSION:
		return "ErrorCode_INCOMPATIBLE_VOIP_VERSION"
	case ErrorCode_INVALID_SNS_ACCESS_TOKEN:
		return "ErrorCode_INVALID_SNS_ACCESS_TOKEN"
	case ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE:
		return "ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE"
	case ErrorCode_NOT_ALLOWED_ADD_CONTACT:
		return "ErrorCode_NOT_ALLOWED_ADD_CONTACT"
	case ErrorCode_NOT_CERTIFICATED:
		return "ErrorCode_NOT_CERTIFICATED"
	case ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE:
		return "ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE"
	case ErrorCode_INVALID_PIN_CODE:
		return "ErrorCode_INVALID_PIN_CODE"
	case ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL:
		return "ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL"
	case ErrorCode_EXCEED_FILE_MAX_SIZE:
		return "ErrorCode_EXCEED_FILE_MAX_SIZE"
	case ErrorCode_EXCEED_DAILY_QUOTA:
		return "ErrorCode_EXCEED_DAILY_QUOTA"
	case ErrorCode_NOT_SUPPORT_SEND_FILE:
		return "ErrorCode_NOT_SUPPORT_SEND_FILE"
	case ErrorCode_MUST_UPGRADE:
		return "ErrorCode_MUST_UPGRADE"
	case ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION:
		return "ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "ErrorCode_ILLEGAL_ARGUMENT":
		return ErrorCode_ILLEGAL_ARGUMENT, nil
	case "ErrorCode_AUTHENTICATION_FAILED":
		return ErrorCode_AUTHENTICATION_FAILED, nil
	case "ErrorCode_DB_FAILED":
		return ErrorCode_DB_FAILED, nil
	case "ErrorCode_INVALID_STATE":
		return ErrorCode_INVALID_STATE, nil
	case "ErrorCode_EXCESSIVE_ACCESS":
		return ErrorCode_EXCESSIVE_ACCESS, nil
	case "ErrorCode_NOT_FOUND":
		return ErrorCode_NOT_FOUND, nil
	case "ErrorCode_INVALID_LENGTH":
		return ErrorCode_INVALID_LENGTH, nil
	case "ErrorCode_NOT_AVAILABLE_USER":
		return ErrorCode_NOT_AVAILABLE_USER, nil
	case "ErrorCode_NOT_AUTHORIZED_DEVICE":
		return ErrorCode_NOT_AUTHORIZED_DEVICE, nil
	case "ErrorCode_INVALID_MID":
		return ErrorCode_INVALID_MID, nil
	case "ErrorCode_NOT_A_MEMBER":
		return ErrorCode_NOT_A_MEMBER, nil
	case "ErrorCode_INCOMPATIBLE_APP_VERSION":
		return ErrorCode_INCOMPATIBLE_APP_VERSION, nil
	case "ErrorCode_NOT_READY":
		return ErrorCode_NOT_READY, nil
	case "ErrorCode_NOT_AVAILABLE_SESSION":
		return ErrorCode_NOT_AVAILABLE_SESSION, nil
	case "ErrorCode_NOT_AUTHORIZED_SESSION":
		return ErrorCode_NOT_AUTHORIZED_SESSION, nil
	case "ErrorCode_SYSTEM_ERROR":
		return ErrorCode_SYSTEM_ERROR, nil
	case "ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD":
		return ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD, nil
	case "ErrorCode_NOT_AUTHENTICATED":
		return ErrorCode_NOT_AUTHENTICATED, nil
	case "ErrorCode_INVALID_IDENTITY_CREDENTIAL":
		return ErrorCode_INVALID_IDENTITY_CREDENTIAL, nil
	case "ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER":
		return ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER, nil
	case "ErrorCode_INTERNAL_ERROR":
		return ErrorCode_INTERNAL_ERROR, nil
	case "ErrorCode_NO_SUCH_IDENTITY_IDENFIER":
		return ErrorCode_NO_SUCH_IDENTITY_IDENFIER, nil
	case "ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY":
		return ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, nil
	case "ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL":
		return ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL, nil
	case "ErrorCode_UNKNOWN_CHANNEL":
		return ErrorCode_UNKNOWN_CHANNEL, nil
	case "ErrorCode_NO_SUCH_MESSAGE_BOX":
		return ErrorCode_NO_SUCH_MESSAGE_BOX, nil
	case "ErrorCode_NOT_AVAILABLE_MESSAGE_BOX":
		return ErrorCode_NOT_AVAILABLE_MESSAGE_BOX, nil
	case "ErrorCode_CHANNEL_DOES_NOT_MATCH":
		return ErrorCode_CHANNEL_DOES_NOT_MATCH, nil
	case "ErrorCode_NOT_YOUR_MESSAGE":
		return ErrorCode_NOT_YOUR_MESSAGE, nil
	case "ErrorCode_MESSAGE_DEFINED_ERROR":
		return ErrorCode_MESSAGE_DEFINED_ERROR, nil
	case "ErrorCode_USER_CANNOT_ACCEPT_PRESENTS":
		return ErrorCode_USER_CANNOT_ACCEPT_PRESENTS, nil
	case "ErrorCode_USER_NOT_STICKER_OWNER":
		return ErrorCode_USER_NOT_STICKER_OWNER, nil
	case "ErrorCode_MAINTENANCE_ERROR":
		return ErrorCode_MAINTENANCE_ERROR, nil
	case "ErrorCode_ACCOUNT_NOT_MATCHED":
		return ErrorCode_ACCOUNT_NOT_MATCHED, nil
	case "ErrorCode_ABUSE_BLOCK":
		return ErrorCode_ABUSE_BLOCK, nil
	case "ErrorCode_NOT_FRIEND":
		return ErrorCode_NOT_FRIEND, nil
	case "ErrorCode_NOT_ALLOWED_CALL":
		return ErrorCode_NOT_ALLOWED_CALL, nil
	case "ErrorCode_BLOCK_FRIEND":
		return ErrorCode_BLOCK_FRIEND, nil
	case "ErrorCode_INCOMPATIBLE_VOIP_VERSION":
		return ErrorCode_INCOMPATIBLE_VOIP_VERSION, nil
	case "ErrorCode_INVALID_SNS_ACCESS_TOKEN":
		return ErrorCode_INVALID_SNS_ACCESS_TOKEN, nil
	case "ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE":
		return ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE, nil
	case "ErrorCode_NOT_ALLOWED_ADD_CONTACT":
		return ErrorCode_NOT_ALLOWED_ADD_CONTACT, nil
	case "ErrorCode_NOT_CERTIFICATED":
		return ErrorCode_NOT_CERTIFICATED, nil
	case "ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE":
		return ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE, nil
	case "ErrorCode_INVALID_PIN_CODE":
		return ErrorCode_INVALID_PIN_CODE, nil
	case "ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL":
		return ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL, nil
	case "ErrorCode_EXCEED_FILE_MAX_SIZE":
		return ErrorCode_EXCEED_FILE_MAX_SIZE, nil
	case "ErrorCode_EXCEED_DAILY_QUOTA":
		return ErrorCode_EXCEED_DAILY_QUOTA, nil
	case "ErrorCode_NOT_SUPPORT_SEND_FILE":
		return ErrorCode_NOT_SUPPORT_SEND_FILE, nil
	case "ErrorCode_MUST_UPGRADE":
		return ErrorCode_MUST_UPGRADE, nil
	case "ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION":
		return ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

type IdentityProvider int64

const (
	IdentityProvider_LINE IdentityProvider = 1
)

func (p IdentityProvider) String() string {
	switch p {
	case IdentityProvider_LINE:
		return "IdentityProvider_LINE"
	}
	return "<UNSET>"
}

func IdentityProviderFromString(s string) (IdentityProvider, error) {
	switch s {
	case "IdentityProvider_LINE":
		return IdentityProvider_LINE, nil
	}
	return IdentityProvider(0), fmt.Errorf("not a valid IdentityProvider string")
}

func IdentityProviderPtr(v IdentityProvider) *IdentityProvider { return &v }

type LoginResultType int64

const (
	LoginResultType_SUCCESS                LoginResultType = 1
	LoginResultType_REQUIRE_DEVICE_CONFIRM LoginResultType = 3
)

func (p LoginResultType) String() string {
	switch p {
	case LoginResultType_SUCCESS:
		return "LoginResultType_SUCCESS"
	case LoginResultType_REQUIRE_DEVICE_CONFIRM:
		return "LoginResultType_REQUIRE_DEVICE_CONFIRM"
	}
	return "<UNSET>"
}

func LoginResultTypeFromString(s string) (LoginResultType, error) {
	switch s {
	case "LoginResultType_SUCCESS":
		return LoginResultType_SUCCESS, nil
	case "LoginResultType_REQUIRE_DEVICE_CONFIRM":
		return LoginResultType_REQUIRE_DEVICE_CONFIRM, nil
	}
	return LoginResultType(0), fmt.Errorf("not a valid LoginResultType string")
}

func LoginResultTypePtr(v LoginResultType) *LoginResultType { return &v }

type MIDType int64

const (
	MIDType_USER  MIDType = 0
	MIDType_ROOM  MIDType = 1
	MIDType_GROUP MIDType = 2
)

func (p MIDType) String() string {
	switch p {
	case MIDType_USER:
		return "MIDType_USER"
	case MIDType_ROOM:
		return "MIDType_ROOM"
	case MIDType_GROUP:
		return "MIDType_GROUP"
	}
	return "<UNSET>"
}

func MIDTypeFromString(s string) (MIDType, error) {
	switch s {
	case "MIDType_USER":
		return MIDType_USER, nil
	case "MIDType_ROOM":
		return MIDType_ROOM, nil
	case "MIDType_GROUP":
		return MIDType_GROUP, nil
	}
	return MIDType(0), fmt.Errorf("not a valid MIDType string")
}

func MIDTypePtr(v MIDType) *MIDType { return &v }

type OpType int64

const (
	OpType_END_OF_OPERATION                 OpType = 0
	OpType_UPDATE_PROFILE                   OpType = 1
	OpType_NOTIFIED_UPDATE_PROFILE          OpType = 2
	OpType_REGISTER_USERID                  OpType = 3
	OpType_ADD_CONTACT                      OpType = 4
	OpType_NOTIFIED_ADD_CONTACT             OpType = 5
	OpType_BLOCK_CONTACT                    OpType = 6
	OpType_UNBLOCK_CONTACT                  OpType = 7
	OpType_NOTIFIED_RECOMMEND_CONTACT       OpType = 8
	OpType_CREATE_GROUP                     OpType = 9
	OpType_UPDATE_GROUP                     OpType = 10
	OpType_NOTIFIED_UPDATE_GROUP            OpType = 11
	OpType_INVITE_INTO_GROUP                OpType = 12
	OpType_NOTIFIED_INVITE_INTO_GROUP       OpType = 13
	OpType_LEAVE_GROUP                      OpType = 14
	OpType_NOTIFIED_LEAVE_GROUP             OpType = 15
	OpType_ACCEPT_GROUP_INVITATION          OpType = 16
	OpType_NOTIFIED_ACCEPT_GROUP_INVITATION OpType = 17
	OpType_KICKOUT_FROM_GROUP               OpType = 18
	OpType_NOTIFIED_KICKOUT_FROM_GROUP      OpType = 19
	OpType_CREATE_ROOM                      OpType = 20
	OpType_INVITE_INTO_ROOM                 OpType = 21
	OpType_NOTIFIED_INVITE_INTO_ROOM        OpType = 22
	OpType_LEAVE_ROOM                       OpType = 23
	OpType_NOTIFIED_LEAVE_ROOM              OpType = 24
	OpType_SEND_MESSAGE                     OpType = 25
	OpType_RECEIVE_MESSAGE                  OpType = 26
	OpType_SEND_MESSAGE_RECEIPT             OpType = 27
	OpType_RECEIVE_MESSAGE_RECEIPT          OpType = 28
	OpType_SEND_CONTENT_RECEIPT             OpType = 29
	OpType_RECEIVE_ANNOUNCEMENT             OpType = 30
	OpType_CANCEL_INVITATION_GROUP          OpType = 31
	OpType_NOTIFIED_CANCEL_INVITATION_GROUP OpType = 32
	OpType_NOTIFIED_UNREGISTER_USER         OpType = 33
	OpType_REJECT_GROUP_INVITATION          OpType = 34
	OpType_NOTIFIED_REJECT_GROUP_INVITATION OpType = 35
	OpType_UPDATE_SETTINGS                  OpType = 36
	OpType_NOTIFIED_REGISTER_USER           OpType = 37
	OpType_INVITE_VIA_EMAIL                 OpType = 38
	OpType_NOTIFIED_REQUEST_RECOVERY        OpType = 39
	OpType_SEND_CHAT_CHECKED                OpType = 40
	OpType_SEND_CHAT_REMOVED                OpType = 41
	OpType_NOTIFIED_FORCE_SYNC              OpType = 42
	OpType_SEND_CONTENT                     OpType = 43
	OpType_SEND_MESSAGE_MYHOME              OpType = 44
	OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW  OpType = 45
	OpType_REMOVE_ALL_MESSAGES              OpType = 46
	OpType_NOTIFIED_UPDATE_PURCHASES        OpType = 47
	OpType_DUMMY                            OpType = 48
	OpType_UPDATE_CONTACT                   OpType = 49
	OpType_NOTIFIED_RECEIVED_CALL           OpType = 50
	OpType_CANCEL_CALL                      OpType = 51
	OpType_NOTIFIED_REDIRECT                OpType = 52
	OpType_NOTIFIED_CHANNEL_SYNC            OpType = 53
	OpType_FAILED_SEND_MESSAGE              OpType = 54
	OpType_NOTIFIED_READ_MESSAGE            OpType = 55
	OpType_FAILED_EMAIL_CONFIRMATION        OpType = 56
	OpType_NOTIFIED_CHAT_CONTENT            OpType = 58
	OpType_NOTIFIED_PUSH_NOTICENTER_ITEM    OpType = 59
)

func (p OpType) String() string {
	switch p {
	case OpType_END_OF_OPERATION:
		return "OpType_END_OF_OPERATION"
	case OpType_UPDATE_PROFILE:
		return "OpType_UPDATE_PROFILE"
	case OpType_NOTIFIED_UPDATE_PROFILE:
		return "OpType_NOTIFIED_UPDATE_PROFILE"
	case OpType_REGISTER_USERID:
		return "OpType_REGISTER_USERID"
	case OpType_ADD_CONTACT:
		return "OpType_ADD_CONTACT"
	case OpType_NOTIFIED_ADD_CONTACT:
		return "OpType_NOTIFIED_ADD_CONTACT"
	case OpType_BLOCK_CONTACT:
		return "OpType_BLOCK_CONTACT"
	case OpType_UNBLOCK_CONTACT:
		return "OpType_UNBLOCK_CONTACT"
	case OpType_NOTIFIED_RECOMMEND_CONTACT:
		return "OpType_NOTIFIED_RECOMMEND_CONTACT"
	case OpType_CREATE_GROUP:
		return "OpType_CREATE_GROUP"
	case OpType_UPDATE_GROUP:
		return "OpType_UPDATE_GROUP"
	case OpType_NOTIFIED_UPDATE_GROUP:
		return "OpType_NOTIFIED_UPDATE_GROUP"
	case OpType_INVITE_INTO_GROUP:
		return "OpType_INVITE_INTO_GROUP"
	case OpType_NOTIFIED_INVITE_INTO_GROUP:
		return "OpType_NOTIFIED_INVITE_INTO_GROUP"
	case OpType_LEAVE_GROUP:
		return "OpType_LEAVE_GROUP"
	case OpType_NOTIFIED_LEAVE_GROUP:
		return "OpType_NOTIFIED_LEAVE_GROUP"
	case OpType_ACCEPT_GROUP_INVITATION:
		return "OpType_ACCEPT_GROUP_INVITATION"
	case OpType_NOTIFIED_ACCEPT_GROUP_INVITATION:
		return "OpType_NOTIFIED_ACCEPT_GROUP_INVITATION"
	case OpType_KICKOUT_FROM_GROUP:
		return "OpType_KICKOUT_FROM_GROUP"
	case OpType_NOTIFIED_KICKOUT_FROM_GROUP:
		return "OpType_NOTIFIED_KICKOUT_FROM_GROUP"
	case OpType_CREATE_ROOM:
		return "OpType_CREATE_ROOM"
	case OpType_INVITE_INTO_ROOM:
		return "OpType_INVITE_INTO_ROOM"
	case OpType_NOTIFIED_INVITE_INTO_ROOM:
		return "OpType_NOTIFIED_INVITE_INTO_ROOM"
	case OpType_LEAVE_ROOM:
		return "OpType_LEAVE_ROOM"
	case OpType_NOTIFIED_LEAVE_ROOM:
		return "OpType_NOTIFIED_LEAVE_ROOM"
	case OpType_SEND_MESSAGE:
		return "OpType_SEND_MESSAGE"
	case OpType_RECEIVE_MESSAGE:
		return "OpType_RECEIVE_MESSAGE"
	case OpType_SEND_MESSAGE_RECEIPT:
		return "OpType_SEND_MESSAGE_RECEIPT"
	case OpType_RECEIVE_MESSAGE_RECEIPT:
		return "OpType_RECEIVE_MESSAGE_RECEIPT"
	case OpType_SEND_CONTENT_RECEIPT:
		return "OpType_SEND_CONTENT_RECEIPT"
	case OpType_RECEIVE_ANNOUNCEMENT:
		return "OpType_RECEIVE_ANNOUNCEMENT"
	case OpType_CANCEL_INVITATION_GROUP:
		return "OpType_CANCEL_INVITATION_GROUP"
	case OpType_NOTIFIED_CANCEL_INVITATION_GROUP:
		return "OpType_NOTIFIED_CANCEL_INVITATION_GROUP"
	case OpType_NOTIFIED_UNREGISTER_USER:
		return "OpType_NOTIFIED_UNREGISTER_USER"
	case OpType_REJECT_GROUP_INVITATION:
		return "OpType_REJECT_GROUP_INVITATION"
	case OpType_NOTIFIED_REJECT_GROUP_INVITATION:
		return "OpType_NOTIFIED_REJECT_GROUP_INVITATION"
	case OpType_UPDATE_SETTINGS:
		return "OpType_UPDATE_SETTINGS"
	case OpType_NOTIFIED_REGISTER_USER:
		return "OpType_NOTIFIED_REGISTER_USER"
	case OpType_INVITE_VIA_EMAIL:
		return "OpType_INVITE_VIA_EMAIL"
	case OpType_NOTIFIED_REQUEST_RECOVERY:
		return "OpType_NOTIFIED_REQUEST_RECOVERY"
	case OpType_SEND_CHAT_CHECKED:
		return "OpType_SEND_CHAT_CHECKED"
	case OpType_SEND_CHAT_REMOVED:
		return "OpType_SEND_CHAT_REMOVED"
	case OpType_NOTIFIED_FORCE_SYNC:
		return "OpType_NOTIFIED_FORCE_SYNC"
	case OpType_SEND_CONTENT:
		return "OpType_SEND_CONTENT"
	case OpType_SEND_MESSAGE_MYHOME:
		return "OpType_SEND_MESSAGE_MYHOME"
	case OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW:
		return "OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW"
	case OpType_REMOVE_ALL_MESSAGES:
		return "OpType_REMOVE_ALL_MESSAGES"
	case OpType_NOTIFIED_UPDATE_PURCHASES:
		return "OpType_NOTIFIED_UPDATE_PURCHASES"
	case OpType_DUMMY:
		return "OpType_DUMMY"
	case OpType_UPDATE_CONTACT:
		return "OpType_UPDATE_CONTACT"
	case OpType_NOTIFIED_RECEIVED_CALL:
		return "OpType_NOTIFIED_RECEIVED_CALL"
	case OpType_CANCEL_CALL:
		return "OpType_CANCEL_CALL"
	case OpType_NOTIFIED_REDIRECT:
		return "OpType_NOTIFIED_REDIRECT"
	case OpType_NOTIFIED_CHANNEL_SYNC:
		return "OpType_NOTIFIED_CHANNEL_SYNC"
	case OpType_FAILED_SEND_MESSAGE:
		return "OpType_FAILED_SEND_MESSAGE"
	case OpType_NOTIFIED_READ_MESSAGE:
		return "OpType_NOTIFIED_READ_MESSAGE"
	case OpType_FAILED_EMAIL_CONFIRMATION:
		return "OpType_FAILED_EMAIL_CONFIRMATION"
	case OpType_NOTIFIED_CHAT_CONTENT:
		return "OpType_NOTIFIED_CHAT_CONTENT"
	case OpType_NOTIFIED_PUSH_NOTICENTER_ITEM:
		return "OpType_NOTIFIED_PUSH_NOTICENTER_ITEM"
	}
	return "<UNSET>"
}

func OpTypeFromString(s string) (OpType, error) {
	switch s {
	case "OpType_END_OF_OPERATION":
		return OpType_END_OF_OPERATION, nil
	case "OpType_UPDATE_PROFILE":
		return OpType_UPDATE_PROFILE, nil
	case "OpType_NOTIFIED_UPDATE_PROFILE":
		return OpType_NOTIFIED_UPDATE_PROFILE, nil
	case "OpType_REGISTER_USERID":
		return OpType_REGISTER_USERID, nil
	case "OpType_ADD_CONTACT":
		return OpType_ADD_CONTACT, nil
	case "OpType_NOTIFIED_ADD_CONTACT":
		return OpType_NOTIFIED_ADD_CONTACT, nil
	case "OpType_BLOCK_CONTACT":
		return OpType_BLOCK_CONTACT, nil
	case "OpType_UNBLOCK_CONTACT":
		return OpType_UNBLOCK_CONTACT, nil
	case "OpType_NOTIFIED_RECOMMEND_CONTACT":
		return OpType_NOTIFIED_RECOMMEND_CONTACT, nil
	case "OpType_CREATE_GROUP":
		return OpType_CREATE_GROUP, nil
	case "OpType_UPDATE_GROUP":
		return OpType_UPDATE_GROUP, nil
	case "OpType_NOTIFIED_UPDATE_GROUP":
		return OpType_NOTIFIED_UPDATE_GROUP, nil
	case "OpType_INVITE_INTO_GROUP":
		return OpType_INVITE_INTO_GROUP, nil
	case "OpType_NOTIFIED_INVITE_INTO_GROUP":
		return OpType_NOTIFIED_INVITE_INTO_GROUP, nil
	case "OpType_LEAVE_GROUP":
		return OpType_LEAVE_GROUP, nil
	case "OpType_NOTIFIED_LEAVE_GROUP":
		return OpType_NOTIFIED_LEAVE_GROUP, nil
	case "OpType_ACCEPT_GROUP_INVITATION":
		return OpType_ACCEPT_GROUP_INVITATION, nil
	case "OpType_NOTIFIED_ACCEPT_GROUP_INVITATION":
		return OpType_NOTIFIED_ACCEPT_GROUP_INVITATION, nil
	case "OpType_KICKOUT_FROM_GROUP":
		return OpType_KICKOUT_FROM_GROUP, nil
	case "OpType_NOTIFIED_KICKOUT_FROM_GROUP":
		return OpType_NOTIFIED_KICKOUT_FROM_GROUP, nil
	case "OpType_CREATE_ROOM":
		return OpType_CREATE_ROOM, nil
	case "OpType_INVITE_INTO_ROOM":
		return OpType_INVITE_INTO_ROOM, nil
	case "OpType_NOTIFIED_INVITE_INTO_ROOM":
		return OpType_NOTIFIED_INVITE_INTO_ROOM, nil
	case "OpType_LEAVE_ROOM":
		return OpType_LEAVE_ROOM, nil
	case "OpType_NOTIFIED_LEAVE_ROOM":
		return OpType_NOTIFIED_LEAVE_ROOM, nil
	case "OpType_SEND_MESSAGE":
		return OpType_SEND_MESSAGE, nil
	case "OpType_RECEIVE_MESSAGE":
		return OpType_RECEIVE_MESSAGE, nil
	case "OpType_SEND_MESSAGE_RECEIPT":
		return OpType_SEND_MESSAGE_RECEIPT, nil
	case "OpType_RECEIVE_MESSAGE_RECEIPT":
		return OpType_RECEIVE_MESSAGE_RECEIPT, nil
	case "OpType_SEND_CONTENT_RECEIPT":
		return OpType_SEND_CONTENT_RECEIPT, nil
	case "OpType_RECEIVE_ANNOUNCEMENT":
		return OpType_RECEIVE_ANNOUNCEMENT, nil
	case "OpType_CANCEL_INVITATION_GROUP":
		return OpType_CANCEL_INVITATION_GROUP, nil
	case "OpType_NOTIFIED_CANCEL_INVITATION_GROUP":
		return OpType_NOTIFIED_CANCEL_INVITATION_GROUP, nil
	case "OpType_NOTIFIED_UNREGISTER_USER":
		return OpType_NOTIFIED_UNREGISTER_USER, nil
	case "OpType_REJECT_GROUP_INVITATION":
		return OpType_REJECT_GROUP_INVITATION, nil
	case "OpType_NOTIFIED_REJECT_GROUP_INVITATION":
		return OpType_NOTIFIED_REJECT_GROUP_INVITATION, nil
	case "OpType_UPDATE_SETTINGS":
		return OpType_UPDATE_SETTINGS, nil
	case "OpType_NOTIFIED_REGISTER_USER":
		return OpType_NOTIFIED_REGISTER_USER, nil
	case "OpType_INVITE_VIA_EMAIL":
		return OpType_INVITE_VIA_EMAIL, nil
	case "OpType_NOTIFIED_REQUEST_RECOVERY":
		return OpType_NOTIFIED_REQUEST_RECOVERY, nil
	case "OpType_SEND_CHAT_CHECKED":
		return OpType_SEND_CHAT_CHECKED, nil
	case "OpType_SEND_CHAT_REMOVED":
		return OpType_SEND_CHAT_REMOVED, nil
	case "OpType_NOTIFIED_FORCE_SYNC":
		return OpType_NOTIFIED_FORCE_SYNC, nil
	case "OpType_SEND_CONTENT":
		return OpType_SEND_CONTENT, nil
	case "OpType_SEND_MESSAGE_MYHOME":
		return OpType_SEND_MESSAGE_MYHOME, nil
	case "OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW":
		return OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW, nil
	case "OpType_REMOVE_ALL_MESSAGES":
		return OpType_REMOVE_ALL_MESSAGES, nil
	case "OpType_NOTIFIED_UPDATE_PURCHASES":
		return OpType_NOTIFIED_UPDATE_PURCHASES, nil
	case "OpType_DUMMY":
		return OpType_DUMMY, nil
	case "OpType_UPDATE_CONTACT":
		return OpType_UPDATE_CONTACT, nil
	case "OpType_NOTIFIED_RECEIVED_CALL":
		return OpType_NOTIFIED_RECEIVED_CALL, nil
	case "OpType_CANCEL_CALL":
		return OpType_CANCEL_CALL, nil
	case "OpType_NOTIFIED_REDIRECT":
		return OpType_NOTIFIED_REDIRECT, nil
	case "OpType_NOTIFIED_CHANNEL_SYNC":
		return OpType_NOTIFIED_CHANNEL_SYNC, nil
	case "OpType_FAILED_SEND_MESSAGE":
		return OpType_FAILED_SEND_MESSAGE, nil
	case "OpType_NOTIFIED_READ_MESSAGE":
		return OpType_NOTIFIED_READ_MESSAGE, nil
	case "OpType_FAILED_EMAIL_CONFIRMATION":
		return OpType_FAILED_EMAIL_CONFIRMATION, nil
	case "OpType_NOTIFIED_CHAT_CONTENT":
		return OpType_NOTIFIED_CHAT_CONTENT, nil
	case "OpType_NOTIFIED_PUSH_NOTICENTER_ITEM":
		return OpType_NOTIFIED_PUSH_NOTICENTER_ITEM, nil
	}
	return OpType(0), fmt.Errorf("not a valid OpType string")
}

func OpTypePtr(v OpType) *OpType { return &v }

type Contact struct {
	Mid string `thrift:"mid,1" json:"mid"`
	// unused fields # 2 to 10
	Status ContactStatus `thrift:"status,11" json:"status"`
	// unused fields # 12 to 21
	DisplayName string `thrift:"displayName,22" json:"displayName"`
	// unused fields # 23 to 25
	StatusMessage string `thrift:"statusMessage,26" json:"statusMessage"`
	// unused fields # 27 to 34
	Attributes int32 `thrift:"attributes,35" json:"attributes"`
	// unused field # 36
	PicturePath string `thrift:"picturePath,37" json:"picturePath"`
}

func NewContact() *Contact {
	return &Contact{}
}

func (p *Contact) GetMid() string {
	return p.Mid
}

func (p *Contact) GetStatus() ContactStatus {
	return p.Status
}

func (p *Contact) GetDisplayName() string {
	return p.DisplayName
}

func (p *Contact) GetStatusMessage() string {
	return p.StatusMessage
}

func (p *Contact) GetAttributes() int32 {
	return p.Attributes
}

func (p *Contact) GetPicturePath() string {
	return p.PicturePath
}
func (p *Contact) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.ReadField26(iprot); err != nil {
				return err
			}
		case 35:
			if err := p.ReadField35(iprot); err != nil {
				return err
			}
		case 37:
			if err := p.ReadField37(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Contact) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *Contact) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		temp := ContactStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *Contact) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 22: %s", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *Contact) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 26: %s", err)
	} else {
		p.StatusMessage = v
	}
	return nil
}

func (p *Contact) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 35: %s", err)
	} else {
		p.Attributes = v
	}
	return nil
}

func (p *Contact) ReadField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 37: %s", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *Contact) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Contact"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField35(oprot); err != nil {
		return err
	}
	if err := p.writeField37(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Contact) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mid: %s", p, err)
	}
	return err
}

func (p *Contact) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:status: %s", p, err)
	}
	return err
}

func (p *Contact) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:displayName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return fmt.Errorf("%T.displayName (22) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:displayName: %s", p, err)
	}
	return err
}

func (p *Contact) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 26); err != nil {
		return fmt.Errorf("%T write field begin error 26:statusMessage: %s", p, err)
	}
	if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
		return fmt.Errorf("%T.statusMessage (26) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 26:statusMessage: %s", p, err)
	}
	return err
}

func (p *Contact) writeField35(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.I32, 35); err != nil {
		return fmt.Errorf("%T write field begin error 35:attributes: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Attributes)); err != nil {
		return fmt.Errorf("%T.attributes (35) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 35:attributes: %s", p, err)
	}
	return err
}

func (p *Contact) writeField37(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 37); err != nil {
		return fmt.Errorf("%T write field begin error 37:picturePath: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return fmt.Errorf("%T.picturePath (37) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 37:picturePath: %s", p, err)
	}
	return err
}

func (p *Contact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Contact(%+v)", *p)
}

type Group struct {
	Id string `thrift:"id,1" json:"id"`
	// unused fields # 2 to 9
	Name string `thrift:"name,10" json:"name"`
	// unused fields # 11 to 19
	Members []*Contact `thrift:"members,20" json:"members"`
	Creator *Contact   `thrift:"creator,21" json:"creator"`
	Invitee []*Contact `thrift:"invitee,22" json:"invitee"`
}

func NewGroup() *Group {
	return &Group{}
}

func (p *Group) GetId() string {
	return p.Id
}

func (p *Group) GetName() string {
	return p.Name
}

func (p *Group) GetMembers() []*Contact {
	return p.Members
}

var Group_Creator_DEFAULT *Contact

func (p *Group) GetCreator() *Contact {
	if !p.IsSetCreator() {
		return Group_Creator_DEFAULT
	}
	return p.Creator
}

func (p *Group) GetInvitee() []*Contact {
	return p.Invitee
}
func (p *Group) IsSetCreator() bool {
	return p.Creator != nil
}

func (p *Group) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Group) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *Group) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Group) ReadField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Members = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Contact{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.Members = append(p.Members, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Group) ReadField21(iprot thrift.TProtocol) error {
	p.Creator = &Contact{}
	if err := p.Creator.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Creator, err)
	}
	return nil
}

func (p *Group) ReadField22(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Invitee = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &Contact{}
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1, err)
		}
		p.Invitee = append(p.Invitee, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Group) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Group"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Group) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *Group) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:name: %s", p, err)
	}
	return err
}

func (p *Group) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("members", thrift.LIST, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:members: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Members)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Members {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:members: %s", p, err)
	}
	return err
}

func (p *Group) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creator", thrift.STRUCT, 21); err != nil {
		return fmt.Errorf("%T write field begin error 21:creator: %s", p, err)
	}
	if err := p.Creator.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Creator, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 21:creator: %s", p, err)
	}
	return err
}

func (p *Group) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("invitee", thrift.LIST, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:invitee: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Invitee)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Invitee {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:invitee: %s", p, err)
	}
	return err
}

func (p *Group) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Group(%+v)", *p)
}

type Location struct {
	Title     string  `thrift:"title,1" json:"title"`
	Address   string  `thrift:"address,2" json:"address"`
	Latitude  float64 `thrift:"latitude,3" json:"latitude"`
	Longitude float64 `thrift:"longitude,4" json:"longitude"`
}

func NewLocation() *Location {
	return &Location{}
}

func (p *Location) GetTitle() string {
	return p.Title
}

func (p *Location) GetAddress() string {
	return p.Address
}

func (p *Location) GetLatitude() float64 {
	return p.Latitude
}

func (p *Location) GetLongitude() float64 {
	return p.Longitude
}
func (p *Location) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Location) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Location) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *Location) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *Location) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *Location) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Location"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Location) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:title: %s", p, err)
	}
	return err
}

func (p *Location) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("address", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:address: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return fmt.Errorf("%T.address (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:address: %s", p, err)
	}
	return err
}

func (p *Location) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:latitude: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
		return fmt.Errorf("%T.latitude (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:latitude: %s", p, err)
	}
	return err
}

func (p *Location) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:longitude: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
		return fmt.Errorf("%T.longitude (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:longitude: %s", p, err)
	}
	return err
}

func (p *Location) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Location(%+v)", *p)
}

type LoginResult_ struct {
	AuthToken   string          `thrift:"authToken,1" json:"authToken"`
	Certificate string          `thrift:"certificate,2" json:"certificate"`
	Verifier    string          `thrift:"verifier,3" json:"verifier"`
	PinCode     string          `thrift:"pinCode,4" json:"pinCode"`
	TypeA1      LoginResultType `thrift:"type,5" json:"type"`
}

func NewLoginResult_() *LoginResult_ {
	return &LoginResult_{}
}

func (p *LoginResult_) GetAuthToken() string {
	return p.AuthToken
}

func (p *LoginResult_) GetCertificate() string {
	return p.Certificate
}

func (p *LoginResult_) GetVerifier() string {
	return p.Verifier
}

func (p *LoginResult_) GetPinCode() string {
	return p.PinCode
}

func (p *LoginResult_) GetTypeA1() LoginResultType {
	return p.TypeA1
}
func (p *LoginResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.AuthToken = v
	}
	return nil
}

func (p *LoginResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Certificate = v
	}
	return nil
}

func (p *LoginResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *LoginResult_) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.PinCode = v
	}
	return nil
}

func (p *LoginResult_) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := LoginResultType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *LoginResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LoginResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthToken)); err != nil {
		return fmt.Errorf("%T.authToken (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authToken: %s", p, err)
	}
	return err
}

func (p *LoginResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:certificate: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Certificate)); err != nil {
		return fmt.Errorf("%T.certificate (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:certificate: %s", p, err)
	}
	return err
}

func (p *LoginResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:verifier: %s", p, err)
	}
	return err
}

func (p *LoginResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:pinCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PinCode)); err != nil {
		return fmt.Errorf("%T.pinCode (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:pinCode: %s", p, err)
	}
	return err
}

func (p *LoginResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:type: %s", p, err)
	}
	return err
}

func (p *LoginResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResult_(%+v)", *p)
}

type Message struct {
	From        string  `thrift:"from,1" json:"from"`
	To          string  `thrift:"to,2" json:"to"`
	ToType      MIDType `thrift:"toType,3" json:"toType"`
	Id          string  `thrift:"id,4" json:"id"`
	CreatedTime int64   `thrift:"createdTime,5" json:"createdTime"`
	// unused fields # 6 to 9
	Text     string    `thrift:"text,10" json:"text"`
	Location *Location `thrift:"location,11" json:"location"`
	// unused fields # 12 to 14
	ContentType ContentType `thrift:"contentType,15" json:"contentType"`
	// unused field # 16
	ContentPreview  []byte            `thrift:"contentPreview,17" json:"contentPreview"`
	ContentMetadata map[string]string `thrift:"contentMetadata,18" json:"contentMetadata"`
}

func NewMessage() *Message {
	return &Message{}
}

func (p *Message) GetFrom() string {
	return p.From
}

func (p *Message) GetTo() string {
	return p.To
}

func (p *Message) GetToType() MIDType {
	return p.ToType
}

func (p *Message) GetId() string {
	return p.Id
}

func (p *Message) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Message) GetText() string {
	return p.Text
}

var Message_Location_DEFAULT *Location

func (p *Message) GetLocation() *Location {
	if !p.IsSetLocation() {
		return Message_Location_DEFAULT
	}
	return p.Location
}

func (p *Message) GetContentType() ContentType {
	return p.ContentType
}

func (p *Message) GetContentPreview() []byte {
	return p.ContentPreview
}

func (p *Message) GetContentMetadata() map[string]string {
	return p.ContentMetadata
}
func (p *Message) IsSetLocation() bool {
	return p.Location != nil
}

func (p *Message) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Message) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.From = v
	}
	return nil
}

func (p *Message) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.To = v
	}
	return nil
}

func (p *Message) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := MIDType(v)
		p.ToType = temp
	}
	return nil
}

func (p *Message) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *Message) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Message) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *Message) ReadField11(iprot thrift.TProtocol) error {
	p.Location = &Location{}
	if err := p.Location.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Location, err)
	}
	return nil
}

func (p *Message) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		temp := ContentType(v)
		p.ContentType = temp
	}
	return nil
}

func (p *Message) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.ContentPreview = v
	}
	return nil
}

func (p *Message) ReadField18(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.ContentMetadata = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val3 = v
		}
		p.ContentMetadata[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Message) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Message"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:from: %s", p, err)
	}
	if err := oprot.WriteString(string(p.From)); err != nil {
		return fmt.Errorf("%T.from (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:from: %s", p, err)
	}
	return err
}

func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:to: %s", p, err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return fmt.Errorf("%T.to (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:to: %s", p, err)
	}
	return err
}

func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toType", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:toType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ToType)); err != nil {
		return fmt.Errorf("%T.toType (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:toType: %s", p, err)
	}
	return err
}

func (p *Message) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:id: %s", p, err)
	}
	return err
}

func (p *Message) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:createdTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return fmt.Errorf("%T.createdTime (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:createdTime: %s", p, err)
	}
	return err
}

func (p *Message) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:text: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Text)); err != nil {
		return fmt.Errorf("%T.text (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:text: %s", p, err)
	}
	return err
}

func (p *Message) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocation() {
		if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:location: %s", p, err)
		}
		if err := p.Location.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Location, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:location: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentType", thrift.I32, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:contentType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ContentType)); err != nil {
		return fmt.Errorf("%T.contentType (15) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:contentType: %s", p, err)
	}
	return err
}

func (p *Message) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentPreview", thrift.STRING, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:contentPreview: %s", p, err)
	}
	if err := oprot.WriteBinary(p.ContentPreview); err != nil {
		return fmt.Errorf("%T.contentPreview (17) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:contentPreview: %s", p, err)
	}
	return err
}

func (p *Message) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentMetadata", thrift.MAP, 18); err != nil {
		return fmt.Errorf("%T write field begin error 18:contentMetadata: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ContentMetadata)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ContentMetadata {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 18:contentMetadata: %s", p, err)
	}
	return err
}

func (p *Message) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Message(%+v)", *p)
}

type MessageBox struct {
	Id string `thrift:"id,1" json:"id"`
	// unused fields # 2 to 8
	MidType      MIDType    `thrift:"midType,9" json:"midType"`
	LastMessages []*Message `thrift:"lastMessages,10" json:"lastMessages"`
}

func NewMessageBox() *MessageBox {
	return &MessageBox{}
}

func (p *MessageBox) GetId() string {
	return p.Id
}

func (p *MessageBox) GetMidType() MIDType {
	return p.MidType
}

func (p *MessageBox) GetLastMessages() []*Message {
	return p.LastMessages
}
func (p *MessageBox) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MessageBox) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *MessageBox) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		temp := MIDType(v)
		p.MidType = temp
	}
	return nil
}

func (p *MessageBox) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Message, 0, size)
	p.LastMessages = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &Message{}
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4, err)
		}
		p.LastMessages = append(p.LastMessages, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *MessageBox) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageBox"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MessageBox) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *MessageBox) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("midType", thrift.I32, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:midType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MidType)); err != nil {
		return fmt.Errorf("%T.midType (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:midType: %s", p, err)
	}
	return err
}

func (p *MessageBox) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessages", thrift.LIST, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:lastMessages: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LastMessages)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.LastMessages {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:lastMessages: %s", p, err)
	}
	return err
}

func (p *MessageBox) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageBox(%+v)", *p)
}

type MessageBoxWrapUp struct {
	MessageBox *MessageBox `thrift:"messageBox,1" json:"messageBox"`
	// unused field # 2
	Contacts []*Contact `thrift:"contacts,3" json:"contacts"`
}

func NewMessageBoxWrapUp() *MessageBoxWrapUp {
	return &MessageBoxWrapUp{}
}

var MessageBoxWrapUp_MessageBox_DEFAULT *MessageBox

func (p *MessageBoxWrapUp) GetMessageBox() *MessageBox {
	if !p.IsSetMessageBox() {
		return MessageBoxWrapUp_MessageBox_DEFAULT
	}
	return p.MessageBox
}

func (p *MessageBoxWrapUp) GetContacts() []*Contact {
	return p.Contacts
}
func (p *MessageBoxWrapUp) IsSetMessageBox() bool {
	return p.MessageBox != nil
}

func (p *MessageBoxWrapUp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MessageBoxWrapUp) ReadField1(iprot thrift.TProtocol) error {
	p.MessageBox = &MessageBox{}
	if err := p.MessageBox.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MessageBox, err)
	}
	return nil
}

func (p *MessageBoxWrapUp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Contacts = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &Contact{}
		if err := _elem5.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem5, err)
		}
		p.Contacts = append(p.Contacts, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *MessageBoxWrapUp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageBoxWrapUp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MessageBoxWrapUp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBox", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:messageBox: %s", p, err)
	}
	if err := p.MessageBox.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.MessageBox, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:messageBox: %s", p, err)
	}
	return err
}

func (p *MessageBoxWrapUp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contacts", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:contacts: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contacts)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Contacts {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:contacts: %s", p, err)
	}
	return err
}

func (p *MessageBoxWrapUp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageBoxWrapUp(%+v)", *p)
}

type MessageBoxWrapUpList struct {
	MessageBoxWrapUpList []*MessageBoxWrapUp `thrift:"messageBoxWrapUpList,1" json:"messageBoxWrapUpList"`
}

func NewMessageBoxWrapUpList() *MessageBoxWrapUpList {
	return &MessageBoxWrapUpList{}
}

func (p *MessageBoxWrapUpList) GetMessageBoxWrapUpList() []*MessageBoxWrapUp {
	return p.MessageBoxWrapUpList
}
func (p *MessageBoxWrapUpList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MessageBoxWrapUpList) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MessageBoxWrapUp, 0, size)
	p.MessageBoxWrapUpList = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &MessageBoxWrapUp{}
		if err := _elem6.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem6, err)
		}
		p.MessageBoxWrapUpList = append(p.MessageBoxWrapUpList, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *MessageBoxWrapUpList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageBoxWrapUpList"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MessageBoxWrapUpList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBoxWrapUpList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:messageBoxWrapUpList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MessageBoxWrapUpList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MessageBoxWrapUpList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:messageBoxWrapUpList: %s", p, err)
	}
	return err
}

func (p *MessageBoxWrapUpList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageBoxWrapUpList(%+v)", *p)
}

type Operation struct {
	Revision    int64  `thrift:"revision,1" json:"revision"`
	CreatedTime int64  `thrift:"createdTime,2" json:"createdTime"`
	TypeA1      OpType `thrift:"type,3" json:"type"`
	ReqSeq      int32  `thrift:"reqSeq,4" json:"reqSeq"`
	// unused fields # 5 to 9
	Param1 string `thrift:"param1,10" json:"param1"`
	Param2 string `thrift:"param2,11" json:"param2"`
	Param3 string `thrift:"param3,12" json:"param3"`
	// unused fields # 13 to 19
	Message *Message `thrift:"message,20" json:"message"`
}

func NewOperation() *Operation {
	return &Operation{}
}

func (p *Operation) GetRevision() int64 {
	return p.Revision
}

func (p *Operation) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Operation) GetTypeA1() OpType {
	return p.TypeA1
}

func (p *Operation) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *Operation) GetParam1() string {
	return p.Param1
}

func (p *Operation) GetParam2() string {
	return p.Param2
}

func (p *Operation) GetParam3() string {
	return p.Param3
}

var Operation_Message_DEFAULT *Message

func (p *Operation) GetMessage() *Message {
	if !p.IsSetMessage() {
		return Operation_Message_DEFAULT
	}
	return p.Message
}
func (p *Operation) IsSetMessage() bool {
	return p.Message != nil
}

func (p *Operation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Operation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *Operation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Operation) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := OpType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *Operation) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *Operation) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Param1 = v
	}
	return nil
}

func (p *Operation) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.Param2 = v
	}
	return nil
}

func (p *Operation) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.Param3 = v
	}
	return nil
}

func (p *Operation) ReadField20(iprot thrift.TProtocol) error {
	p.Message = &Message{}
	if err := p.Message.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Message, err)
	}
	return nil
}

func (p *Operation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Operation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Operation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:revision: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return fmt.Errorf("%T.revision (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:revision: %s", p, err)
	}
	return err
}

func (p *Operation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:createdTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return fmt.Errorf("%T.createdTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:createdTime: %s", p, err)
	}
	return err
}

func (p *Operation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:type: %s", p, err)
	}
	return err
}

func (p *Operation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:reqSeq: %s", p, err)
	}
	return err
}

func (p *Operation) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param1", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:param1: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Param1)); err != nil {
		return fmt.Errorf("%T.param1 (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:param1: %s", p, err)
	}
	return err
}

func (p *Operation) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param2", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:param2: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Param2)); err != nil {
		return fmt.Errorf("%T.param2 (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:param2: %s", p, err)
	}
	return err
}

func (p *Operation) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param3", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:param3: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Param3)); err != nil {
		return fmt.Errorf("%T.param3 (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:param3: %s", p, err)
	}
	return err
}

func (p *Operation) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:message: %s", p, err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Message, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:message: %s", p, err)
	}
	return err
}

func (p *Operation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Operation(%+v)", *p)
}

type Profile struct {
	Mid string `thrift:"mid,1" json:"mid"`
	// unused fields # 2 to 19
	DisplayName string `thrift:"displayName,20" json:"displayName"`
	// unused fields # 21 to 23
	StatusMessage string `thrift:"statusMessage,24" json:"statusMessage"`
	// unused fields # 25 to 32
	PicturePath string `thrift:"picturePath,33" json:"picturePath"`
}

func NewProfile() *Profile {
	return &Profile{}
}

func (p *Profile) GetMid() string {
	return p.Mid
}

func (p *Profile) GetDisplayName() string {
	return p.DisplayName
}

func (p *Profile) GetStatusMessage() string {
	return p.StatusMessage
}

func (p *Profile) GetPicturePath() string {
	return p.PicturePath
}
func (p *Profile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.ReadField24(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.ReadField33(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Profile) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *Profile) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *Profile) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 24: %s", err)
	} else {
		p.StatusMessage = v
	}
	return nil
}

func (p *Profile) ReadField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 33: %s", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *Profile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Profile"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField33(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Profile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mid: %s", p, err)
	}
	return err
}

func (p *Profile) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:displayName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return fmt.Errorf("%T.displayName (20) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:displayName: %s", p, err)
	}
	return err
}

func (p *Profile) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 24); err != nil {
		return fmt.Errorf("%T write field begin error 24:statusMessage: %s", p, err)
	}
	if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
		return fmt.Errorf("%T.statusMessage (24) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 24:statusMessage: %s", p, err)
	}
	return err
}

func (p *Profile) writeField33(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 33); err != nil {
		return fmt.Errorf("%T write field begin error 33:picturePath: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return fmt.Errorf("%T.picturePath (33) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 33:picturePath: %s", p, err)
	}
	return err
}

func (p *Profile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Profile(%+v)", *p)
}

type Room struct {
	Mid string `thrift:"mid,1" json:"mid"`
	// unused fields # 2 to 9
	Contacts []*Contact `thrift:"contacts,10" json:"contacts"`
}

func NewRoom() *Room {
	return &Room{}
}

func (p *Room) GetMid() string {
	return p.Mid
}

func (p *Room) GetContacts() []*Contact {
	return p.Contacts
}
func (p *Room) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Room) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *Room) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Contacts = tSlice
	for i := 0; i < size; i++ {
		_elem7 := &Contact{}
		if err := _elem7.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem7, err)
		}
		p.Contacts = append(p.Contacts, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Room) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Room"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Room) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mid: %s", p, err)
	}
	return err
}

func (p *Room) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contacts", thrift.LIST, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:contacts: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contacts)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Contacts {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:contacts: %s", p, err)
	}
	return err
}

func (p *Room) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Room(%+v)", *p)
}

type TalkException struct {
	Code   ErrorCode `thrift:"code,1" json:"code"`
	Reason string    `thrift:"reason,2" json:"reason"`
}

func NewTalkException() *TalkException {
	return &TalkException{}
}

func (p *TalkException) GetCode() ErrorCode {
	return p.Code
}

func (p *TalkException) GetReason() string {
	return p.Reason
}
func (p *TalkException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TalkException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := ErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *TalkException) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *TalkException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TalkException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TalkException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:code: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return fmt.Errorf("%T.code (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:code: %s", p, err)
	}
	return err
}

func (p *TalkException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:reason: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return fmt.Errorf("%T.reason (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:reason: %s", p, err)
	}
	return err
}

func (p *TalkException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkException(%+v)", *p)
}

func (p *TalkException) Error() string {
	return p.String()
}
